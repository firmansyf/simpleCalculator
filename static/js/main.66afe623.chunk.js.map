{"version":3,"sources":["CalculatorApp.js","reportWebVitals.js","index.js"],"names":["CalculatorApp","useState","calc","setCalc","result","setResult","ops","updateCalc","val","includes","slice","eval","toString","createButton","digits","i","push","onClick","Calculate","deleteLast","value","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"01BAGA,SAASA,gBAAiB,IAAD,UACCC,oDAAS,IADV,kMAChBC,KADgB,cACVC,QADU,yBAEKF,oDAAS,IAFd,mMAEhBG,OAFgB,cAERC,UAFQ,cAKjBC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAI3BC,WAAa,SAAbA,WAAcC,KAEfF,IAAIG,SAASD,MAAiB,KAATN,MACrBI,IAAIG,SAASD,MAAQF,IAAIG,SAASP,KAAKQ,OAAO,MAIjDP,QAAQD,KAAOM,KAEVF,IAAIG,SAASD,MAChBH,UAAUM,KAAKT,KAAOM,KAAKI,cAMzBC,aAAe,WAGnB,IAFA,IAAMC,EAAS,GADU,WAGhBC,GACPD,EACGE,KACC,qEAAQC,QAAS,kBAAMV,WAAWQ,EAAEH,aAApC,SACGG,GADmDA,IAIvDH,YAPIG,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAUT,OAAOD,GAKHI,UAAY,SAAZA,YACJf,QAAQQ,KAAKT,MAAMU,aAKfO,WAAa,WACjB,GAAa,KAATjB,KAAJ,CAIA,IAAMkB,EAAQlB,KAAKQ,MAAM,GAAI,GAC7BP,QAAQiB,KAIV,OACE,6HACE,mEAAKC,UAAU,UAAf,UACE,4EACG,IADH,SAEQ,iFAFR,iBAIA,mEAAKA,UAAU,OAAf,UACE,mEAAKA,UAAU,UAAf,UACGjB,OAAS,kFAAQA,OAAR,OAA0B,GACnCF,MAAQ,OAEX,mEAAKmB,UAAU,YAAf,UACE,qEAAQJ,QAAS,kBAAMV,WAAW,MAAlC,iBACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,iBACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,iBACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,iBAEA,qEAAQU,QAASE,WAAjB,oBAGF,mEAAKE,UAAU,SAAf,UACGR,eACD,qEAAQI,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,iBAEA,qEAAQU,QAASC,UAAjB,4BAQGlB,qC,iHCpFAsB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjC,EAAA,EAAD,MAEFkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.66afe623.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction CalculatorApp() {\n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  // Initialize ops to array\n  const ops = [\"/\", \"*\", \"+\", \"-\", \".\"];\n  // End Initialize ops to array\n\n  // Upadate value\n  const updateCalc = (val) => {\n    if (\n      (ops.includes(val) && calc === \"\") ||\n      (ops.includes(val) && ops.includes(calc.slice(-1)))\n    ) {\n      return;\n    }\n    setCalc(calc + val);\n\n    if (!ops.includes(val)) {\n      setResult(eval(calc + val).toString());\n    }\n  };\n  // End Update\n\n  // Create Button\n  const createButton = () => {\n    const digits = [];\n\n    for (let i = 1; i < 10; i++) {\n      digits\n        .push(\n          <button onClick={() => updateCalc(i.toString())} key={i}>\n            {i}\n          </button>,\n        )\n        .toString();\n    }\n\n    return digits;\n  };\n  // End Create Button\n\n  // Calculation\n  const Calculate = () => {\n    setCalc(eval(calc).toString());\n  };\n  //  End Calculation\n\n  // Delete Calc\n  const deleteLast = () => {\n    if (calc === \"\") {\n      return;\n    }\n\n    const value = calc.slice(0, -1);\n    setCalc(value);\n  };\n  // End Delete Calc\n\n  return (\n    <>\n      <div className=\"section\">\n        <h1>\n          {\" \"}\n          Simple<sup>2</sup> Calculator\n        </h1>\n        <div className=\"main\">\n          <div className=\"display\">\n            {result ? <span>({result})</span> : \"\"}\n            {calc || \"0\"}\n          </div>\n          <div className=\"operators\">\n            <button onClick={() => updateCalc(\"/\")}> / </button>\n            <button onClick={() => updateCalc(\"*\")}> * </button>\n            <button onClick={() => updateCalc(\"+\")}> + </button>\n            <button onClick={() => updateCalc(\"-\")}> - </button>\n\n            <button onClick={deleteLast}> C </button>\n          </div>\n\n          <div className=\"digits\">\n            {createButton()}\n            <button onClick={() => updateCalc(\"0\")}>0</button>\n            <button onClick={() => updateCalc(\".\")}> . </button>\n\n            <button onClick={Calculate}> = </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default CalculatorApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport CalculatorApp from \"./CalculatorApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CalculatorApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}